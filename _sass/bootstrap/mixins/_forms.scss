@use "sass:color";
@use "../functions";
@use "../variables";
@use "../vendor/rfs";
@use "border-radius";
@use "box-shadow";
@use "deprecate";
@use "gradients";

// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `$input-focus-border-color` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.
@mixin form-control-focus($ignore-warning: false) {
  &:focus {
    color: variables.$input-focus-color;
    background-color: variables.$input-focus-bg;
    border-color: variables.$input-focus-border-color;
    outline: 0;
    @if variables.$enable-shadows {
      @include box-shadow.box-shadow(variables.$input-box-shadow, variables.$input-focus-box-shadow);
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: variables.$input-focus-box-shadow;
    }
  }
  @include deprecate.deprecate("The `form-control-focus()` mixin", "v4.4.0", "v5", $ignore-warning);
}

// This mixin uses an `if()` technique to be compatible with Dart Sass
// See https://github.com/sass/sass/issues/1873#issuecomment-152293725 for more details
@mixin form-validation-state-selector($state) {
  @if ($state == "valid" or $state == "invalid") {
    .was-validated #{if(&, "&", "")}:#{$state},
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  } @else {
    #{if(&, "&", "")}.is-#{$state} {
      @content;
    }
  }
}

@mixin form-validation-state($state, $color, $icon) {
  .#{$state}-feedback {
    display: none;
    width: 100%;
    margin-top: variables.$form-feedback-margin-top;
    @include rfs.font-size(variables.$form-feedback-font-size);
    color: $color;
  }

  .#{$state}-tooltip {
    position: absolute;
    top: 100%;
    z-index: 5;
    display: none;
    max-width: 100%; // Contain to parent when possible
    padding: variables.$form-feedback-tooltip-padding-y variables.$form-feedback-tooltip-padding-x;
    margin-top: .1rem;
    @include rfs.font-size(variables.$form-feedback-tooltip-font-size);
    line-height: variables.$form-feedback-tooltip-line-height;
    color: functions.color-yiq($color);
    background-color: rgba($color, variables.$form-feedback-tooltip-opacity);
    @include border-radius.border-radius(variables.$form-feedback-tooltip-border-radius);
  }

  @include form-validation-state-selector($state) {
    ~ .#{$state}-feedback,
    ~ .#{$state}-tooltip {
      display: block;
    }
  }

  .form-control {
    @include form-validation-state-selector($state) {
      border-color: $color;

      @if variables.$enable-validation-icons {
        padding-right: variables.$input-height-inner;
        background-image: functions.escape-svg($icon);
        background-repeat: no-repeat;
        background-position: right variables.$input-height-inner-quarter center;
        background-size: variables.$input-height-inner-half variables.$input-height-inner-half;
      }

      &:focus {
        border-color: $color;
        box-shadow: 0 0 0 variables.$input-focus-width rgba($color, .25);
      }
    }
  }

  // stylelint-disable-next-line selector-no-qualifying-type
  textarea.form-control {
    @include form-validation-state-selector($state) {
      @if variables.$enable-validation-icons {
        padding-right: variables.$input-height-inner;
        background-position: top variables.$input-height-inner-quarter right variables.$input-height-inner-quarter;
      }
    }
  }

  .custom-select {
    @include form-validation-state-selector($state) {
      border-color: $color;

      @if variables.$enable-validation-icons {
        padding-right: variables.$custom-select-feedback-icon-padding-right;
        background: variables.$custom-select-background, functions.escape-svg($icon) variables.$custom-select-bg no-repeat variables.$custom-select-feedback-icon-position / variables.$custom-select-feedback-icon-size;
      }

      &:focus {
        border-color: $color;
        box-shadow: 0 0 0 variables.$input-focus-width rgba($color, .25);
      }
    }
  }

  .form-check-input {
    @include form-validation-state-selector($state) {
      ~ .form-check-label {
        color: $color;
      }

      ~ .#{$state}-feedback,
      ~ .#{$state}-tooltip {
        display: block;
      }
    }
  }

  .custom-control-input {
    @include form-validation-state-selector($state) {
      ~ .custom-control-label {
        color: $color;

        &::before {
          border-color: $color;
        }
      }

      &:checked {
        ~ .custom-control-label::before {
          border-color: color.adjust($color, $lightness: 10%);
          @include gradients.gradient-bg(color.adjust($color, $lightness: 10%));
        }
      }

      &:focus {
        ~ .custom-control-label::before {
          box-shadow: 0 0 0 variables.$input-focus-width rgba($color, .25);
        }

        &:not(:checked) ~ .custom-control-label::before {
          border-color: $color;
        }
      }
    }
  }

  // custom file
  .custom-file-input {
    @include form-validation-state-selector($state) {
      ~ .custom-file-label {
        border-color: $color;
      }

      &:focus {
        ~ .custom-file-label {
          border-color: $color;
          box-shadow: 0 0 0 variables.$input-focus-width rgba($color, .25);
        }
      }
    }
  }
}
