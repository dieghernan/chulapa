{"version":3,"sourceRoot":"","sources":["skeletor.scss"],"names":[],"mappings":"AAkDA,qCACA,qBAzCS,QA4CP,mFAGA,oCA3CO,QAgDP,6EApDO,QAqDP,6DAGA,mCApDO,QAqDP,mCAtDO,QAsDc,iBACrB,kCA1DO,QA6DP,4FAtDM,QAuDN,kCAzDK,QA4DL,uNAlEU,QAmEV,mCAlEO,QAmEP,kEA5DM,QA6DN,+FAhEO,QAiEP,oCAlEO,QAmEP,oCAjEK,QAqEL,wCAnEM,QAuEN,gGAvEM,QAwEN,oCA3EO,QA4EP,oCAhFO,QAiFP,2JAnFM,KAyLP,gCACA,8BACA,0BAhLY,QAgL4B,MA3LjC,KAmMN,oBAvLS,QAwLT,qBAxLS,QAyLT,sBAzLS,QA4LT,qBA5LS,QA+LT,qBA/LS,QAgMT,qBAhMS,QAmMT,qBAnMS,QAyMT,qBA9MK,QAiNL,qBAnNO,QAsNP,qBAzNO,QA0NP,qBA1NO,QAgOP,oBA7NO,QA8NP,qBA9NO,QA+NP,qBA/NO,QAgOP,qBAhOO,QAiOP,qBAjOO,QAkOP,qBAlOO,QAmOP,qBAnOO,QAyOP,qBAxOO,QAyOP,qBAzOO,QA0OP,qBA1OO,QA2OP,qBA3OO,QA4OP,qBA5OO,QA8OP,qBAlPO,QAmPP,qBA1NiB,SA6NjB,qBAxPM,KA8PN,sBA1PI,QA2PJ,qBA3PI,QA4PJ,qBA5PI,QA6PJ,qBA7PI,QAmQJ,oBAjQO,QAkQP,qBAlQO,QAqQP,oBAzQO,QA0QP,qBA1QO,QAiRP,qBAnRM,KAmRoB,iBAC1B,qBA9QO,QA8QsB,iBAC7B,qBA/QO,QA+QsB,iBAC7B,qBAtRM,KAsRsB,kBAC5B,mDAMA,oBA5RU,QA6RV,qBA7RU,QA8RV,qBA9RU,QA+RV,qBA/RU,QAqSV,qBAhSO,QAiSP,qBAjSO,QAuSP,oBAtSK,QAySL,qBAzSK,QA0SL,qBA1SK,QA2SL,qBA3SK,QA4SL,qBA5SK,QA+SL,qBA/SK,QAkTL,qBAhTM,QAsTN,qBA/TM,KAgUN,qBAhUM,KAmUN,qBAnUM,KAoUN,qBApUM,KAsUN,qBA/TK,QAoUL,qBA3UM,KA6UN,qBA7UM,KAgVN,qBAhVM,KAiVN,qBAjVM,KAkVN,qBAlVM","sourcesContent":["/* skeletor Theme for pygments/Jekyll\n *\n * Based on https://ramonmcros.com/skeletor-syntax/ prismjs theme\n * Created by Ramón M. Cros, MIT License Copyright (c) 2017 ramonmcros\n *\n * Adapted by Diego H <https://github.com/dieghernan/>\n */\n\n$white: #ffffff;\n$lightblue: #dce7fd;\n$yellow: #f3e4a2;\n$orange: #ffb793;\n$red: #f36a66;\n$orchid: #ff8adb;\n$purple: #bd93f9;\n$blue: #93b4ff;\n$bluegray: #7b94a5;\n$green: #84fba2;\n$verylightgray: #c5c8c6;\n$background: #2b2836;\n$comments: #655e7f;\n\n\n// Top level colors\n$foreground:  $white; // Base color: usually on Settings > Foreground\n$background:  $background; // Background color: usually on Settings > Background\n\n\n$comment: $comments; // Prismjs: comment\n$constant_character_escape: $blue; // Prismjs: string\n$constant_language: $orchid; // Prismjs: boolean, keyword\n$constant_numeric: $orchid; // Prismjs: number\n$constant_other: $yellow; // Primsjs: builtin\n$entity_name: $purple; // Primsjs: function\n$entity_name_tag: $yellow; // Primsjs: tag\n$entity_name_type: #a7aec2s; // Primsjs: namespace\n$invalid: $red; // No mapping\n$keyword_control: $purple; // Primsjs: keyword\n$keyword_operator: $yellow;  // Prismjs: operator\n$markup_bold: $foreground; // Prismjs: bold\n$markup_italic: $foreground; //Prismjs: italic\n$markup_heading: $purple; // Prismjs: title\n$punctuation_definition: $lightblue; // Prismjs: punctuation\n$storage_type: $purple; // Prismjs: keyword\n$string: $blue; // Prismjs: string\n$string_regexp: $green; // Prismjs: regex\n$support_type: $blue; // Prismjs: property\n$variable: $foreground; // Prismjs: variable\n\n/* Special mapping rouge - Prismjs */\n.highlight .nc {color: $foreground !important;} // Primsjs class-name to Name.Class\n.highlight .sc{color: $yellow;} //Primsjs: char to String.Char\n\n.language-css .highlight {\n  .nc, .nf {color: $purple !important;} // Prismjs selector: CSS specific\n}\n.language-html .highlight {\n  .na, {color: $purple;} // Prismjs attr-name: CSS specific\n}\n\n// Special scope of Skeletor\n.language-javascript .highlight {\n  .k, .kd {color: $yellow;}\n  .nc {color: $blue !important;} // Primsjs class-name to Name.Class\n}\n.language-css .highlight {\n  .nt {color: $purple;}\n  .cp {color: $orchid; font-weight: bold;}\n  .k {color: $yellow;}\n}\n.language-php .highlight {\n  .k, .kd, .kt {color: $green;}\n  .n {color: $blue;}\n}\n.language-sass .highlight {\n  .s, .s1, .s2, .sb, .sx, .sr, .no {color: $lightblue;}\n  .k {color: $yellow;}\n  .nv, .si {color: $green;}\n  .ow, .o, .nt {color: $purple;}\n  .nn, {color: $orchid;}\n  .na {color: $blue;}\n}\n\n.language-markdown .highlight {\n  .sb {color: $green;}\n}\n\n.language-yaml .highlight {\n  .nt, .nl, .nv {color: $green;}\n  .na {color: $purple;}\n  .kt {color: $yellow;}\n  .s, .s1, .s2, .sx, .sb {color: $foreground}\n}\n// tmTheme scopes as SASS variables\n// Naming convention: scope_without_dots\n// See more in: https://macromates.com/manual/en/language_grammars\n\n// Comments\n$comment:                  $foreground !default; //Any comments\n$comment_block:            $comment !default; //Multi-line comments /* … */,<- … -->.\n$comment_line:             $comment !default; //Line comments\n$comment_line_number-sign: $comment_line !default; // # comment\n\n// Constants\n$constant_character_escape: $foreground !default; //Escape sequences.\n$constant_language:         $foreground !default; //Special constants like true, false,nil\n\n// Constant: Numbers\n$constant_numeric:          $foreground !default; //Any number\n$constant_numeric_float:    $constant_numeric !default; // Floating number\n$constant_numeric_integer:  $constant_numeric !default; //Integers\n\n// Other constants\n$constant_other:        $foreground !default; //Any other constants, e.g. colors in CSS.\n$constant_other_symbol: $constant_other !default; //\n\n// Entities: Part of the document, for example a chapter, class, function, or tag.\n$entity_name:                 $foreground !default; //Larger entity\n$entity_name_tag:             $entity_name !default; //Tag name.\n$entity_name_type:            $entity_name !default; //Type declaration or class.\n$entity_other_attribute-name: $foreground !default; //Name of an attribute (mainly in tags).\n\n// Invalid: Stuff that is invalid, illegal or deprecated\n// Mapped to errors in Pygments\n$invalid: $foreground !default;\n\n// Keywords\n$keyword_control:         $foreground !default; //Related to flow control: continue, while, return, etc.\n$keyword_control_import:  $keyword_control !default;\n$keyword_operator:        $foreground !default; //Operators can be textual (e.g. or) or be characters.\n\n// Markup: For markup languages and generally applies to larger subsets of the text\n$markup_bold:             $foreground !default; //Bold text.\n$markup_heading:          $foreground !default; //Section header.\n$markup_italic:           $foreground !default; //Italic text\n\n\n// Punctuation\n// Specific of SublimeText, see:\n// https://www.sublimetext.com/docs/scope_naming.html#alphabetical-reference\n$punctuation_definition: $foreground !default;\n\n// Storage: These are keywords in Pygments\n$storage_type: $foreground !default; //Type of something, class, function, int, var, etc.\n\n\n// Strings\n$string:                $foreground !default; //Strings\n$string_interpolated:   $string !default; //Strings which are \"evaluated\": `date`, $(pwd).\n$string_quoted:         $string !default; //Quoted strings\n$string_quoted_single:  $string_quoted !default; //Single quoted strings: 'foo'.\n$string_quoted_double:  $string_quoted !default; //Double quoted strings: \"foo\".\n$string_quoted_other:   $string_quoted !default; //Other types of quoting: $'shell', %s{...}.\n$string_regexp:         $string !default; //Regular expressions: /(\\w+)/.\n\n// Support: Built-in things\n$support:           $foreground !default; //Things provided by a framework or library.\n$support_constant:  $support !default; //Constants (magic values) provided by the framework/library.\n$support_type:      $support !default; //Types provided by the framework/library,\n\n\n// Variable\n$variable:           $foreground !default; //Not all languages allow easy identification (and thus markup) of these.\n$variable_language:  $variable !default; //Reserved language variables like this,super,self, etc.\n$variable_other:     $variable !default; //Other variables\n\n// Not mapped Pygment classes, we don't provide special styles here\n// but can be easily added as:\n// .highlight .esc {color: myColor;}\n// Pygment css class -> Description\n// .esc -> Escape\n// .g   -> Generic (A generic, unstyled token. Normally not used)\n// .gd  -> Generic.Deleted (Marks the token value as deleted)\n// .gi  -> Generic.Inserted (Marks the token value as inserted)\n// .go  -> Generic.Output (Marks the token value as program output)\n// .gp  -> Generic.Prompt (Marks the token value as command prompt)\n// .hll -> High-lighted Line\n// .kr  -> Keyword.Reserved (For reserved keywords)\n// .l   -> Literal (For any literal if not further defined)\n// .ld  -> Literal.Date (for date literals)\n// .n   -> Name (For any name (variable names, function names, classes))\n// .nx  -> Name.Other (Other names. Normally unused.)\n// .x   -> Other (special token for data not matched by a parser (e.g. HTML markup in PHP code))\n// .sa  -> String.Affix (Token type for affixes)\n// .sc  -> String.Char (Token type for single characters (e.g. Java, C).)\n// .sd  -> String.Doc (Token type for documentation strings)\n// .w   -> Whitespace (for whitespace)\n\n\n\n// Styles\n\n/* Overall */\n .highlight table td {padding: 5px;}\n .highlight table pre {margin: 0;}\n .highlight pre {background:$background; color:$foreground;}\n\n\n\n// Classes\n/* Comments */\n.highlight {\n  // Scope: comments\n  .c   {color:$comment;} //Comment\n  .cp  {color:$comment;} //Comment.Preproc\n  .cpf {color:$comment;} //Comment.PreprocFile\n\n  // Scope: comments.block\n  .cm  {color:$comment_block;} //Comment.Multiline\n\n  // Scope: comments.line\n  .c1  {color:$comment_line;} //Comment.Single\n  .cs  {color:$comment_line;} //Comment.Special\n\n  // Scope: comments.line.number-sign\n  .ch  {color:$comment_line_number-sign;} //Comment.Hashbang\n}\n\n/* Constants */\n.highlight {\n  // Scope: constant.character.escape\n  .se  {color:$constant_character_escape;} //String.Escape\n\n  // Scope: constant.language\n  .kc  {color:$constant_language;} //Keyword.Constant\n\n  // Scope: constant.other\n  .no  {color:$constant_other;} //Name.Constant\n  .ss  {color:$constant_other_symbol;} //String.Symbol\n}\n\n/* Numbers */\n.highlight {\n  // Scope: constant.numeric and children\n  .m   {color:$constant_numeric;} //Number\n  .mb  {color:$constant_numeric;} //Number.Bin\n  .mh  {color:$constant_numeric;} //Number.Hex\n  .mo  {color:$constant_numeric;} //Number.Oct\n  .mf  {color:$constant_numeric_float;} //Number.Float\n  .mi  {color:$constant_numeric_integer;} //Number.Integer\n  .il  {color:$constant_numeric_integer;} //Number.Integer.Long\n}\n\n/* Entities */\n.highlight {\n  // Scope: entity.name\n  .nc {color:$entity_name;} //Name.Class\n  .nd {color:$entity_name;} //Name.Decorator\n  .ne {color:$entity_name;} //Name.Entity\n  .nf {color:$entity_name;} //Name.Function\n  .py {color:$entity_name;} //Name.Property\n\n  .nt {color:$entity_name_tag;} //Name.Tag\n  .nn {color:$entity_name_type;} //Name.Namespace\n\n  // Scope: entity.other\n  .na {color:$entity_other_attribute-name;} //Name.Attribute\n}\n\n/* Invalid */\n.highlight {\n  // Scope: Invalid\n  .err {color:$invalid;} //Error\n  .gr  {color:$invalid;} //Generic.Error\n  .gt  {color:$invalid;} //Generic.Traceback\n  .ne  {color:$invalid;} //Name.Exception\n}\n\n/* Keywords */\n.highlight {\n  // Scope: keyword.control\n  .k  {color:$keyword_control;} //Keyword\n  .kn {color:$keyword_control_import;} //Keyword.Namespace\n\n  // Scope: keyword.operator\n  .o  {color:$keyword_operator;} //Operator\n  .ow {color:$keyword_operator;} //Operator.Word\n}\n\n/* Markup */\n// We add italics, etc. on css\n.highlight {\n  // Scope: Subclasses of markup\n  .gs  {color:$markup_bold; font-weight:bold;} //Generic.Strong\n  .gh  {color:$markup_heading; font-weight:bold;} //Generic.Heading\n  .gu  {color:$markup_heading; font-weight:bold;} //Generic.Subheading\n  .ge  {color:$markup_italic; font-style:italic;} //Generic.Emph\n  .ges {font-weight:bold; font-style:italic;} //Generic.EmphStrong\n}\n\n/* Punctuation */\n.highlight {\n  // Scope: punctuation.definition\n  .p  {color:$punctuation_definition;} //Punctuation\n  .pm {color:$punctuation_definition;} //Punctuation.Marker\n  .dl {color:$punctuation_definition;} //String.Delimiter\n  .sh {color:$punctuation_definition;} //String.Heredoc\n}\n\n/* Storage */\n.highlight {\n  // Scope: storage.type\n  .kd {color:$storage_type;} //Keyword.Declaration\n  .kt {color:$storage_type;} //Keyword.Type\n}\n\n/* String */\n.highlight {\n  // Scope: string\n  .s  {color:$string;} //String\n\n  // Scope: string.quoted\n  .sb {color:$string_quoted;} //String.Backtick\n  .s1 {color:$string_quoted_single;} //String.Single\n  .s2 {color:$string_quoted_double;} //String.Double\n  .sx {color:$string_quoted_other;} //String.Other\n\n  // Scope: string.interpolated\n  .si {color:$string_interpolated;} //String.Interpol\n\n  // Scope: string.regexp\n  .sr {color:$string_regexp;} //String.Regex\n}\n\n/* Support */\n.highlight {\n  // Scope: support\n  .nb {color:$support;} //Name.Builtin\n  .bp {color:$support;} //Name.Builtin.Pseudo\n\n  // Scope: support.constant\n  .fm {color:$support_constant;} //Name.Function.Magic\n  .vm {color:$support_constant;} //Name.Variable.Magic\n\n  .nl {color: $support_type}; //Name.Label\n}\n\n/* Variable */\n.highlight {\n  .vi {color:$variable;} //Name.Variable.Instance\n\n  .kp {color:$variable_language;} //Keyword.Pseudo\n\n  // Scope: variable.other\n  .nv {color:$variable_other;} // Name.Variable\n  .vc {color:$variable_other;} // Name.Variable.Class\n  .vg {color:$variable_other;} // Name.Variable.Global\n}\n"],"file":"skeletor.css"}